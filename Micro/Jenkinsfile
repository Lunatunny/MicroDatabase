node {
    stage ("Checkout - DATABASE API"){
        git branch: 'master', url: 'https://github.com/Lunatunny/MicroDatabase'
    }
    
    stage ("Gradle Build - DATABASE API") {
        sh 'gradle -b Micro/build.gradle clean build'
    }
    
    stage ("Gradle Bootjar-Package - DATABASE API") {
        sh 'gradle -b Micro/build.gradle bootjar'
    }
    
    stage ("Build Docker Image - DATABASE API") {
        sh 'docker build --rm -t jenkins-data:v1.0 ./Micro/Dockerfile'
    }
    
    stage ("Inspect Docker Image - DATABASE API"){
        sh "docker images jenkins-data:v1.0"
        sh "docker inspect jenkins-data:v1.0"
    }
    
    stage ("Run Docker Container Instance - DATABASE API"){
        sh "docker run -d --rm --name jenkins-data -p 8081:8081 jenkins-data:v1.0"
     }
    
    stage('User Acceptance Test - DATABASE API') {
	
	  def response= input message: 'Is this build good to go?',
	   parameters: [choice(choices: 'Yes\nNo', 
	   description: '', name: 'Pass')]
	
	  if(response=="Yes") {
	    stage('Deploy Kubernetes Cluster - DATABASE API') {
	      sh "kubectl create deployment jenkins-data --image=jenkins-data:v1.0"
		//get the value of API_HOST from kubernetes services and set the env variable
	      sh "kubectl set env deployment/jenkins-data API_HOST=10.104.0.44:8080"
	      sh "kubectl expose deployment jenkins-data --type=LoadBalancer --port=8081"
	    }
	  }
    }

    stage("Production Deployment View"){
        sh "kubectl get deployments"
        sh "kubectl get pods"
        sh "kubectl get services"
    }
}
